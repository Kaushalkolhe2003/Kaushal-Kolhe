#include<iostream>
#include<bits/stdc++.h>
using namespace std;
/* Intersection of two sorted array 
  In this the brute force approach will be just having interation over the arrays and check its commom or not 
  and keeping maintaining the visited element to be mark so no previsit for that element
  Time complexity is [O(n1xn2)] and space complexity is [O(x)] or worst O(n1)
  */
  
vector<int> intersectionOfArrays(vector<int> &A, vector<int> &B){
    
  vector <int> ans;
  
  // to maintain visited
  vector <int> visited(B.size(), 0);  
  int i = 0, j = 0;
  
  for (i = 0; i < A.size(); i++) {
      
    for (j = 0; j < B.size(); j++) {

      if (A[i] == B[j] && visited[j] == 0) { 
      
        //if element matches and has not been matched with any other before
        ans.push_back(B[j]);
        visited[j] = 1;

        break;
      } 
      
      else if (B[j] > A[i]) break; 
      //because array is sorted , element will not be beyond this
    }
  }
  
  return ans;
    
}
//Optimal wala solution .....[O(n+m)]
vector<int> intersectionOfArrays(vector<int>&A, vector<int>&B){
    
  // Declare ans array.
  vector <int> ans;

  int i = 0, j = 0; 

  // to traverse the arrays
  while (i < A.size() && j < B.size()) {
      
    //if current element in i is smaller
    if (A[i] < B[j]) { 
      i++;
    } else if (B[j] < A[i]) {
      j++;
    } else {
        
      //both elements are equal
      ans.push_back(A[i]); 
      i++;
      j++;
    }
  }
  
  return ans;
    
}
void printarr(vector<int> &a){
    for(int i=0;i<a.size();i++){
        cout<<a[i]<<" ";
    }
    cout<<endl;
}
int main(){
    vector<int> a={1,3,4,6,8,9};
    vector <int> b={2,3,3,4,8,10};
    vector <int> c=intersectionOfArrays(a,b);
    printarr(c);
}

/* Optimal approach is just using two pointer just iterate over the one pointer for one array and onther for another array
space complexity will be just O(1)
Time will be O(n1+n2)

